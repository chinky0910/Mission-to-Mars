{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "28ea3eb1",
   "metadata": {},
   "outputs": [],
   "source": [
    "#import all dependencies\n",
    "from splinter import Browser\n",
    "from bs4 import BeautifulSoup\n",
    "import pandas as pd\n",
    "import datetime as dt\n",
    "\n",
    "#set the executable path and initialize the chrome browser in splinter\n",
    "# executable_path = {'executable_path':'/Users/ankit/opt/anaconda3/lib/python3.9/site-packages/chromedriver'}\n",
    "# browser = Browser('chrome', **executable_path)\n",
    "browser = Browser(\"chrome\", executable_path=\"chromedriver\",headless=True)\n",
    "\n",
    "def mars_news(browser):\n",
    "    #visit the mars nasa news site\n",
    "    url = 'https://mars.nasa.gov/news/'\n",
    "    browser.visit(url)\n",
    "    #optinal delay for loading the page\n",
    "    browser.is_element_present_by_css(\"ul.item_list li.slide\", wait_time=1)\n",
    "    # Convert the browser html to a soup object and then quit the browser\n",
    "    html =  browser.html\n",
    "    news_soup = BeautifulSoup(html, 'html.parser')\n",
    "    # add try/except for error handling\n",
    "    try:\n",
    "        slide_elem = news_soup.select_one('ul.item_list li.slide')\n",
    "        # Use the parent element to find the first `a` tag and save it as `news_title`\n",
    "        news_title = slide_elem.find(\"div\", class_='content_title').get_text()\n",
    "        #use the parent element to find the paragraph text\n",
    "        news_paragraph = slide_elem.find('div', class_='article_teaser_body').get_text()    \n",
    "    except AttributeError:\n",
    "        return None, None\n",
    "    return news_title, news_paragraph\n",
    "\n",
    "# \"### Featured Images\"\n",
    "def featured_image(browser):\n",
    "\n",
    "    #visit url\n",
    "    url = 'https://www.jpl.nasa.gov/spaceimages/?search=&category=Mars'\n",
    "    browser.visit(url)\n",
    "\n",
    "    #find and click the full image button. An id can only be used one time throughout the entire page.\n",
    "    full_image_elem =  browser.find_by_id('full_image')\n",
    "    full_image_elem.click()\n",
    "\n",
    "\n",
    "    #find the more info button and click that.\n",
    "    browser.is_element_present_by_text('more info', wait_time=1)\n",
    "    more_info_elem = browser.find_link_by_partial_text('more info')\n",
    "    more_info_elem.click()\n",
    "\n",
    "    #parse the resulting html with soup\n",
    "    html = browser.html\n",
    "    img_soup = BeautifulSoup(html, 'html.parser')\n",
    "\n",
    "    try:\n",
    "        #find the relative image url.This way, when NASA updates its image page, our code will still pull the most recent image.\n",
    "        img_url_rel = img_soup.select_one('figure.lede a img').get(\"src\")\n",
    "        \n",
    "        #use the base url to create an absolute url\n",
    "        img_url = f'https://www.jpl.nasa.gov{img_url_rel}'\n",
    "        \n",
    "    except AttributeError:\n",
    "        return None\n",
    "        \n",
    "    return img_url\n",
    "\n",
    "def mars_facts():\n",
    "    # add try/except for error handling\n",
    "    try:\n",
    "        #scrape the entire facts table with '.read_html()' function.This table settings may need to be modified,if the website changes it.\n",
    "        #Use 'read_html' to scrape the facts table into a dataframe\n",
    "        df = pd.read_html('https://space-facts.com/mars/')[0]\n",
    "        \n",
    "    except BaseException:\n",
    "        return None   \n",
    "        \n",
    "    #assign columns and set index of dataframe\n",
    "    df.columns=['Description', 'Mars']\n",
    "    df.set_index('Description', inplace=True)\n",
    "    # convert DataFrame back into HTML format, add bootstrap      \n",
    "    return df.to_html()\n",
    "\n",
    "#end the automated browsing session.\n",
    "# browser.quit()\n",
    "\n",
    "\n",
    "def mars_hemi(browser):\n",
    "    #visit the url for mars hemispheres images.\n",
    "    url = 'https://astrogeology.usgs.gov/search/results?q=hemisphere+enhanced&k1=target&v1=Mars'\n",
    "    browser.visit(url)\n",
    "\n",
    "    #find and click on 'Cerberus Hemisphere Enhanced' mars hemisphere\n",
    "    cer_hemi_small = browser.find_by_text('Cerberus Hemisphere Enhanced').click()\n",
    "\n",
    "    #find and click on the 'open' button using its id.\n",
    "    cer_hemi_big = browser.find_by_id('wide-image-toggle').click()\n",
    "\n",
    "    #parse the resulting html with beautifulsoup\n",
    "    html = browser.html\n",
    "    cer_soup = BeautifulSoup(html, 'html.parser')\n",
    "\n",
    "    try:\n",
    "        #find the relative image url with its img tag\n",
    "        cer_url_rel = cer_soup.select_one('img.wide-image').get(\"src\")\n",
    "        \n",
    "        #use the base url to create an absolute url\n",
    "        cer_url_big = f'https://astrogeology.usgs.gov{cer_url_rel}'\n",
    "        \n",
    "        # find the title using h2 tag with class=title and get the text only\n",
    "        cer_title_big = cer_soup.select_one('h2.title').get_text()\n",
    "    except AttributeError:\n",
    "        return None, None \n",
    "    \n",
    "    #visit the url     \n",
    "    browser.visit(url)\n",
    "\n",
    "    #find and click on 'Schiaparelli Hemisphere Enhanced' mars hemisphere\n",
    "    sch_hemi_small = browser.find_by_text('Schiaparelli Hemisphere Enhanced').click()\n",
    "\n",
    "    sch_hemi_big = browser.find_by_id('wide-image-toggle').click()\n",
    "\n",
    "    html = browser.html\n",
    "    sch_soup = BeautifulSoup(html, 'html.parser')\n",
    "\n",
    "    try:\n",
    "        sch_url_rel = sch_soup.select_one('img.wide-image').get(\"src\")\n",
    "        \n",
    "        sch_url_big= f'https://astrogeology.usgs.gov{sch_url_rel}'\n",
    "        \n",
    "        sch_title_big = sch_soup.select_one('h2.title').get_text()\n",
    "    except AttributeError:\n",
    "        return None, None\n",
    "        \n",
    "    browser.visit(url)\n",
    "\n",
    "    #find and click on 'Syrtis Major Hemisphere Enhanced' mars hemisphere\n",
    "    syr_hemi_small = browser.find_by_text('Syrtis Major Hemisphere Enhanced').click()\n",
    "   \n",
    "    syr_hemi_big = browser.find_by_id('wide-image-toggle').click()\n",
    "    \n",
    "    html = browser.html\n",
    "    syr_soup = BeautifulSoup(html, 'html.parser')\n",
    "    \n",
    "    try:\n",
    "        syr_url_rel = syr_soup.select_one('img.wide-image').get(\"src\")\n",
    "            \n",
    "        syr_url_big = f'https://astrogeology.usgs.gov{syr_url_rel}'\n",
    "            \n",
    "        syr_title_big = syr_soup.select_one('h2.title').get_text()\n",
    "    except AttributeError:\n",
    "        return None, None\n",
    "            \n",
    "    browser.visit(url)\n",
    "\n",
    "    #find and click on 'Valles Marineris Hemisphere Enhanced' mars hemisphere\n",
    "    val_hemi_small = browser.find_by_text('Valles Marineris Hemisphere Enhanced').click()\n",
    "   \n",
    "    val_hemi_big = browser.find_by_id('wide-image-toggle').click()\n",
    "   \n",
    "    html = browser.html\n",
    "    val_soup = BeautifulSoup(html, 'html.parser')\n",
    "    \n",
    "    try:\n",
    "        val_url_rel = val_soup.select_one('img.wide-image').get(\"src\")\n",
    "        \n",
    "        val_url_big = f'https://astrogeology.usgs.gov{val_url_rel}'\n",
    "            \n",
    "        val_title_big = val_soup.select_one('h2.title').get_text()\n",
    "    except AttributeError:\n",
    "        return None, None\n",
    "        \n",
    "    return cer_url_big, cer_title_big, sch_url_big, sch_title_big, syr_url_big, syr_title_big, val_url_big, val_title_big\n",
    "\n",
    "\n",
    "\n",
    "#Initialize the browser.Create a data dictionary.End the WebDriver and return the scraped data.\n",
    "def scrape_all():\n",
    "    # initialize headless driver for deployment\n",
    "    browser = Browser(\"chrome\", executable_path=\"chromedriver\",headless=True)\n",
    "    news_title, news_paragraph = mars_news(browser)\n",
    "    \n",
    "    cer_url_big, cer_title_big, sch_url_big, sch_title_big, syr_url_big, syr_title_big, val_url_big, val_title_big = mars_hemi(browser)\n",
    "    \n",
    "    # run all scraping functions and store results in data dictionary\n",
    "    data = {\n",
    "        \"news_title\": news_title,\n",
    "        \"news_paragraph\" : news_paragraph,\n",
    "        \"featured_image\" : featured_image(browser),\n",
    "        \"facts\": mars_facts(),\n",
    "        \"Cerberus_url\": cer_url_big,\n",
    "        \"Cerberus_title\": cer_title_big,\n",
    "        \"Schiaparelli_url\": sch_url_big,\n",
    "        \"Schiaparelli_title\": sch_title_big,\n",
    "        \"Syrtis_url\": syr_url_big,\n",
    "        \"Syrtis_title\": syr_title_big,\n",
    "        \"Valles_url\": val_url_big,\n",
    "        \"Valles_title\": val_title_big,\n",
    "        \"last_modified\" : dt.datetime.now()\n",
    "    }\n",
    "    return data\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    # if running as script, print scraped data\n",
    "    print(scrape_all())"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.11"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
